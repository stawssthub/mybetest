name: BE Build and Deploy

on:
  workflow_dispatch:

  push: 
    branches:
    - main 
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: setup .NET
      uses: actions/setup-dotnet@v3
      with:  
        dotnet-version: '6.0.x'
    - name: Restore Dependencies
      run: dotnet restore ./src/SoftwareTesting.sln
    - name: Build
      run: dotnet build ./src/SoftwareTesting.sln --no-restore
    - name: Test
      run: dotnet test ./src/XUnitExamples/XUnitExamples.csproj --no-build --verbosity normal --logger "trx;LogFileName=xtests.trx"
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        trx_files: "/home/runner/work/mybetest/mybetest/src/XUnitExamples/TestResults/xtests.trx" #for ubnutu
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        dotnet tool install --global dotnet-sonarscanner
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet-sonarscanner begin /k:"stawssthub_mybetest" /o:"stawssthub" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build ./src/SoftwareTesting.sln
        dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"  

    - name: SonarQube Quality Gate Check
      id: sonarqube-quality-gate-check
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      with:
        scanMetadataReportFile: target/sonar/report-task.txt
        timeout-minutes: 5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: "Example show SonarQube Quality Gate Status value"
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
        
        

   
        
        
  
